import java.text.SimpleDateFormat

import scala.io.Source

object HomeWork04 {
  def main(args: Array[String]): Unit = {

    //1、读取数据
    val datas = Source.fromFile("datas/tax.txt").getLines().toList
    //2、列裁剪[切割数据,将时间字符串转成时间戳便于后续计算]
    val selectDatas = datas.map(line => {
      val arr = line.split("\t")
      //司机id
      val id = arr.head
      //上车区域
      val fromAddr = arr(1)
      //下车区域u
      val toAddr = arr(2)
      val formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
      //上车时间
      val fromTime = formatter.parse(arr(3)).getTime
      //下车时间
      val toTime = formatter.parse(arr.last).getTime

      (id, toAddr, fromTime, toTime)
    })
    //3、按照司机分组
    val groupedDatas = selectDatas.groupBy {
      case (id, toAddr, fromTime, toTime) => id
    }

    /**
      * Map(
      * A -> List(
      * (A,宝安区,2020-07-15 10:05:10,2020-07-15 10:25:02),
      * (A,宝安区,2020-07-15 11:55:55,2020-07-15 12:12:23),
      * (A,龙岗区,2020-07-15 10:35:15,2020-07-15 10:40:50),
      * (A,龙岗区,2020-07-15 11:33:12,2020-07-15 11:45:35),
      * (A,龙华区,2020-07-15 11:02:08,2020-07-15 11:17:15),
      * (A,龙岗区,2020-07-15 12:17:10,2020-07-15 12:33:21)
      * )
      *
      * B -> List(
      * (B,龙华区,2020-07-15 10:15:21,2020-07-15 10:35:12),
      * (B,福田区,2020-07-15 11:43:22,2020-07-15 11:55:45),
      * (B,龙岗区,2020-07-15 10:45:25,2020-07-15 10:50:00),
      * (B,宝安区,2020-07-15 12:05:05,2020-07-15 12:22:33),
      * (B,宝安区,2020-07-15 11:12:18,2020-07-15 11:27:25),
      * (B,龙岗区,2020-07-15 12:27:20,2020-07-15 12:43:31),
      * )
      * )
      */
    //4、对每个司机的所有数据按照时间排序
    val regions = groupedDatas.toList.flatMap(x => {
      //x = A -> List(
      //               (A,宝安区,2020-07-15 10:05:10,2020-07-15 10:25:02),
      //               (A,宝安区,2020-07-15 11:55:55,2020-07-15 12:12:23),
      //               (A,龙岗区,2020-07-15 10:35:15,2020-07-15 10:40:50),
      //               (A,龙岗区,2020-07-15 11:33:12,2020-07-15 11:45:35),
      //               (A,龙华区,2020-07-15 11:02:08,2020-07-15 11:17:15),
      //               (A,龙岗区,2020-07-15 12:17:10,2020-07-15 12:33:21)
      //           )
      val sortedList = x._2.sortBy {
        case (id, toAddr, fromTime, toTime) => fromTime
      }

      /**
        * List(
        * (A,宝安区,2020-07-15 10:05:10,2020-07-15 10:25:02),
        * (A,龙岗区,2020-07-15 10:35:15,2020-07-15 10:40:50),
        * (A,龙华区,2020-07-15 11:02:08,2020-07-15 11:17:15),
        * (A,龙岗区,2020-07-15 11:33:12,2020-07-15 11:45:35),
        * (A,宝安区,2020-07-15 11:55:55,2020-07-15 12:12:23),
        * (A,龙岗区,2020-07-15 12:17:10,2020-07-15 12:33:21)
        * )
        */
      val slidingList = sortedList.sliding(2)

      /**
        * List(
        * List((A,宝安区,2020-07-15 10:05:10,2020-07-15 10:25:02),(A,龙岗区,2020-07-15 10:35:15,2020-07-15 10:40:50)),
        * List((A,龙岗区,2020-07-15 10:35:15,2020-07-15 10:40:50),(A,龙华区,2020-07-15 11:02:08,2020-07-15 11:17:15)),
        * List((A,龙华区,2020-07-15 11:02:08,2020-07-15 11:17:15),(A,龙岗区,2020-07-15 10:35:15,2020-07-15 10:40:50)),
        * ...
        * )
        */
      //5、获取每个司机每次的等客时间
      val regionDatas = slidingList.map(y => {
        //y = List((A,宝安区,2020-07-15 10:05:10,2020-07-15 10:25:02),(A,龙岗区,2020-07-15 10:35:15,2020-07-15 10:40:50)),
        //等客区域
        val region = y.head._2
        //等客时间
        val duration = (y.last._3 - y.head._4) / 1000 / 60

        (region, duration)
      })

      regionDatas
    })
    //[ (龙岗区,10),(宝安区,20) ,(龙岗区,5),.. ]
    //6、按照区域分组
    val groupedRegion = regions.groupBy(_._1)

    /**
      * Map(
      * 龙岗区 -> List( (龙岗区,10),(龙岗区,5),..)
      * 宝安区 -> List( (宝安区,20),... )
      * )
      *
      */
    //7、统计每个区域的平均等客时间
    val result = groupedRegion.map(x => {
      //x = 龙岗区 -> List( (龙岗区,10),(龙岗区,5),..)
      //总时间
      val totalTime = x._2.map(_._2).sum

      //总等客次数
      val num = x._2.size
      (x._1, totalTime / num)
    })

    //8、结果展示
    result.foreach(println(_))
  }
}
